/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package facturaci√≥n;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static org.apache.poi.hssf.usermodel.HeaderFooter.file;
import org.apache.poi.ss.usermodel.Cell;

/**
 *
 * @author omar_
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    Inventario inventario = new Inventario();
    int idproductoinventario = 0;
    Carrito carrito = new Carrito();
    File f = new File("Recursos/Inventario.txt");

    public Ventana() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("Logo.jpg")).getImage());
        actualizarCarrito();
        try {
            CargarInventario();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizarInventario();
        actualizarInventarioCarrito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaProductosFacturacion = new javax.swing.JTable();
        AgregarProducto = new javax.swing.JToggleButton();
        cantidadProductoFacturacion = new javax.swing.JTextField();
        precioProductoFacturacion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nombreProductoFacturacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaFactura = new javax.swing.JTable();
        Total = new javax.swing.JLabel();
        Pagar = new javax.swing.JToggleButton();
        LimpiarCarrito = new javax.swing.JToggleButton();
        QuitarProducto = new javax.swing.JToggleButton();
        SeleccionarProducto = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaInventario = new javax.swing.JTable();
        BuscarProducto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        seleccionarProducto = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nombreProductoInventario = new javax.swing.JTextField();
        PrecioProductoInventario = new javax.swing.JTextField();
        CantidadProductoInventario = new javax.swing.JTextField();
        GuardarProducto = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FACTURACION");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        TablaProductosFacturacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Producto", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TablaProductosFacturacion);

        AgregarProducto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        AgregarProducto.setText("Agregar");
        AgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarProductoActionPerformed(evt);
            }
        });

        cantidadProductoFacturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidadProductoFacturacionActionPerformed(evt);
            }
        });
        cantidadProductoFacturacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cantidadProductoFacturacionKeyTyped(evt);
            }
        });

        precioProductoFacturacion.setEditable(false);
        precioProductoFacturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioProductoFacturacionActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Cantidad");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Precio");

        nombreProductoFacturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreProductoFacturacionActionPerformed(evt);
            }
        });
        nombreProductoFacturacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreProductoFacturacionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreProductoFacturacionKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Nombre");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Producto");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("TOTAL =");

        TablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Producto", "Precio cant", "Cantidad", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaFactura);

        Total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Total.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Total.setText("0");

        Pagar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Pagar.setText("Pagar");
        Pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PagarActionPerformed(evt);
            }
        });

        LimpiarCarrito.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LimpiarCarrito.setText("Limpiar");
        LimpiarCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarCarritoActionPerformed(evt);
            }
        });

        QuitarProducto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        QuitarProducto.setText("Quitar");
        QuitarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitarProductoActionPerformed(evt);
            }
        });

        SeleccionarProducto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SeleccionarProducto.setText("Seleccionar");
        SeleccionarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LimpiarCarrito)
                            .addComponent(QuitarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(550, 550, 550))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(183, 183, 183)
                                .addComponent(Pagar))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SeleccionarProducto))
                                .addComponent(AgregarProducto, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cantidadProductoFacturacion)
                                .addComponent(precioProductoFacturacion)
                                .addComponent(nombreProductoFacturacion)
                                .addComponent(jScrollPane3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(344, 344, 344))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(SeleccionarProducto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombreProductoFacturacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(precioProductoFacturacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cantidadProductoFacturacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(LimpiarCarrito, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(QuitarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Pagar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("FACTURACI√ìN", jPanel2);

        TablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Producto", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaInventario);

        BuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarProductoActionPerformed(evt);
            }
        });
        BuscarProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BuscarProductoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BuscarProductoKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Producto");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nombre");

        seleccionarProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        seleccionarProducto.setText("SELECCIONAR");
        seleccionarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarProductoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Precio");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Cantidad");

        nombreProductoInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreProductoInventarioActionPerformed(evt);
            }
        });

        PrecioProductoInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrecioProductoInventarioActionPerformed(evt);
            }
        });
        PrecioProductoInventario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PrecioProductoInventarioKeyTyped(evt);
            }
        });

        CantidadProductoInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CantidadProductoInventarioActionPerformed(evt);
            }
        });
        CantidadProductoInventario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CantidadProductoInventarioKeyTyped(evt);
            }
        });

        GuardarProducto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        GuardarProducto.setText("Guardar");
        GuardarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BuscarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seleccionarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(GuardarProducto)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(CantidadProductoInventario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                        .addComponent(PrecioProductoInventario, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nombreProductoInventario, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seleccionarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BuscarProducto))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombreProductoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PrecioProductoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CantidadProductoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GuardarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("INVENTARIO", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1295, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PrecioProductoInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrecioProductoInventarioActionPerformed

    }//GEN-LAST:event_PrecioProductoInventarioActionPerformed

    private void CantidadProductoInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CantidadProductoInventarioActionPerformed

    }//GEN-LAST:event_CantidadProductoInventarioActionPerformed

    private void nombreProductoInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreProductoInventarioActionPerformed

    }//GEN-LAST:event_nombreProductoInventarioActionPerformed

    private void cantidadProductoFacturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidadProductoFacturacionActionPerformed

    }//GEN-LAST:event_cantidadProductoFacturacionActionPerformed

    private void precioProductoFacturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioProductoFacturacionActionPerformed

    }//GEN-LAST:event_precioProductoFacturacionActionPerformed

    private void nombreProductoFacturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreProductoFacturacionActionPerformed

    }//GEN-LAST:event_nombreProductoFacturacionActionPerformed

    private void LimpiarCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarCarritoActionPerformed
        ArrayList<Producto> Productos = carrito.getProductos();
        for (Producto Producto1 : Productos) {
            ArrayList<Producto> Productos2 = inventario.getProductos();
            ArrayList<Producto> Productos3 = new ArrayList<Producto>();
            for (Producto producto : Productos2) {
                Producto p;
                if (Producto1.getId_producto() == producto.getId_producto()) {
                    p = new Producto(producto.getNombre_producto(), producto.getId_producto(), (float) producto.getPrecio(), (Producto1.getCantidad() + producto.getCantidad()));
                } else {
                    p = producto;
                }
                Productos3.add(p);
            }
            inventario.setProductos(Productos3);
        }
        carrito.vaciar();
        actualizarCarrito();
        actualizarInventario();
        actualizarInventarioCarrito();
    }//GEN-LAST:event_LimpiarCarritoActionPerformed

    private void QuitarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitarProductoActionPerformed
        System.out.println();
        ArrayList<Producto> Productos = carrito.getProductos();
        ArrayList<Producto> Productos4 = new ArrayList<Producto>();
        for (Producto Producto1 : Productos) {
            if ((TablaFactura.getValueAt(TablaFactura.getSelectedRow(), 0)).equals(Producto1.getNombre_producto())) {
                ArrayList<Producto> Productos2 = inventario.getProductos();
                ArrayList<Producto> Productos3 = new ArrayList<Producto>();
                for (Producto producto : Productos2) {
                    Producto p;
                    if (Producto1.getId_producto() == producto.getId_producto()) {
                        p = new Producto(producto.getNombre_producto(), producto.getId_producto(), (producto.getPrecio()), (producto.getCantidad() + Producto1.getCantidad()));
                    } else {
                        p = producto;
                    }
                    Productos3.add(p);
                }
                inventario.setProductos(Productos3);
            } else {
                Productos4.add(Producto1);
            }
        }
        carrito.setProductos(Productos4);
        actualizarCarrito();
        actualizarInventario();
        actualizarInventarioCarrito();
    }//GEN-LAST:event_QuitarProductoActionPerformed

    private void GuardarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarProductoActionPerformed
        Producto producto = null;
        if (idproductoinventario == 0) {
            producto = new Producto(nombreProductoInventario.getText().toUpperCase(), newId(), Integer.parseInt(PrecioProductoInventario.getText()), Integer.parseInt(CantidadProductoInventario.getText()));
            inventario.setProducto(producto);
        } else {
            ArrayList<Producto> Productos = inventario.getProductos();
            ArrayList<Producto> Productos2 = new ArrayList<Producto>();
            for (Producto Producto1 : Productos) {
                if (Producto1.getId_producto() == idproductoinventario) {
                    Producto1 = new Producto(nombreProductoInventario.getText().toUpperCase(), idproductoinventario, Integer.parseInt(PrecioProductoInventario.getText()), Integer.parseInt(CantidadProductoInventario.getText()));
                }
                Productos2.add(Producto1);
            }
            inventario.setProductos(Productos2);
        }
        idproductoinventario = 0;
        nombreProductoInventario.setText("");
        PrecioProductoInventario.setText("");
        CantidadProductoInventario.setText("");
        actualizarInventario();
        actualizarInventarioCarrito();
        guardarInventario();
    }//GEN-LAST:event_GuardarProductoActionPerformed

    private void seleccionarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarProductoActionPerformed
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            if ((Producto1.getNombre_producto()).equals(TablaInventario.getValueAt(TablaInventario.getSelectedRow(), 0))) {
                idproductoinventario = Producto1.getId_producto();
                nombreProductoInventario.setText(Producto1.getNombre_producto());
                PrecioProductoInventario.setText("" + Producto1.getPrecio());
                CantidadProductoInventario.setText("" + Producto1.getCantidad());
            }
        }
    }//GEN-LAST:event_seleccionarProductoActionPerformed

    private void BuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarProductoActionPerformed

    }//GEN-LAST:event_BuscarProductoActionPerformed

    private void BuscarProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BuscarProductoKeyTyped
        actualizarInventario(BuscarProducto.getText().toUpperCase());
    }//GEN-LAST:event_BuscarProductoKeyTyped

    private void BuscarProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BuscarProductoKeyPressed
        actualizarInventario(BuscarProducto.getText().toUpperCase());
        precioProductoFacturacion.setText("");
    }//GEN-LAST:event_BuscarProductoKeyPressed

    private void nombreProductoFacturacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreProductoFacturacionKeyPressed
        actualizarInventarioCarrito(nombreProductoFacturacion.getText().toUpperCase());
        precioProductoFacturacion.setText("");
    }//GEN-LAST:event_nombreProductoFacturacionKeyPressed

    private void nombreProductoFacturacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreProductoFacturacionKeyTyped
        actualizarInventarioCarrito(nombreProductoFacturacion.getText().toUpperCase());
    }//GEN-LAST:event_nombreProductoFacturacionKeyTyped

    private void SeleccionarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarProductoActionPerformed
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            if ((Producto1.getNombre_producto()).equals(TablaProductosFacturacion.getValueAt(TablaProductosFacturacion.getSelectedRow(), 0))) {
                nombreProductoFacturacion.setText(Producto1.getNombre_producto());
                precioProductoFacturacion.setText("" + Producto1.getPrecio());
            }
        }
    }//GEN-LAST:event_SeleccionarProductoActionPerformed

    private void AgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarProductoActionPerformed
        if (!precioProductoFacturacion.getText().equals("") && !cantidadProductoFacturacion.getText().equals("")) {
            ArrayList<Producto> Productos2 = inventario.getProductos();
            ArrayList<Producto> Productos3 = new ArrayList<Producto>();
            System.out.println();
            for (Producto Producto1 : Productos2) {
                Producto Producto2;
                if ((Producto1.getNombre_producto()).equals(nombreProductoFacturacion.getText().toUpperCase())) {
                    if (Producto1.getCantidad() < Integer.parseInt(cantidadProductoFacturacion.getText())) {
                        JOptionPane.showMessageDialog(this, "La cantidad del producto a comprar supera la cantidad en el inventario");
                        Producto2 = Producto1;
                    } else {
                        Producto p = new Producto(Producto1.getNombre_producto(), Producto1.getId_producto(), (Producto1.getPrecio()), (Float.parseFloat(cantidadProductoFacturacion.getText())));
                        carrito.addProducto(p);
                        Producto p2 = new Producto(Producto1.getNombre_producto(), Producto1.getId_producto(), (Producto1.getPrecio()), (Producto1.getCantidad() - Float.parseFloat(cantidadProductoFacturacion.getText())));
                        Producto2 = p2;
                    }
                } else {
                    Producto2 = Producto1;
                }
                Productos3.add(Producto2);
            }
            inventario.setProductos(Productos3);
        }
        cantidadProductoFacturacion.setText("");
        precioProductoFacturacion.setText("");
        nombreProductoFacturacion.setText("");
        actualizarInventarioCarrito();
        actualizarInventario();
        actualizarCarrito();
    }//GEN-LAST:event_AgregarProductoActionPerformed

    private void cantidadProductoFacturacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadProductoFacturacionKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_cantidadProductoFacturacionKeyTyped

    private void PrecioProductoInventarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PrecioProductoInventarioKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_PrecioProductoInventarioKeyTyped

    private void CantidadProductoInventarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CantidadProductoInventarioKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_CantidadProductoInventarioKeyTyped

    private void PagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PagarActionPerformed
        String Nombre = "", Cedula = "";
        String[] botones = {"Si", "No", "Cancelar Pago"};
        String[] botones2 = {"Si", "No"};
        int v = JOptionPane.showOptionDialog(null, "Desea agregar nombre y cedula a la factura?", "PAGO DE FACTURA", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, botones, botones[0]);
        if (v == 0) {
            try {
                Nombre = JOptionPane.showInputDialog(null, "Introduce nombre del cliente");
                Cedula = JOptionPane.showInputDialog(null, "Introduce cedula del cliente");
                String nombreArchivo = crearExcel(Nombre, Cedula);
                carrito.vaciar();
                guardarInventario();
                actualizarCarrito();
                int v2 = JOptionPane.showOptionDialog(null, "Desea una copia de la factura?", "COPIA DE FACTURA", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, botones2, botones2[0]);
                if (v2 == 0) {
                    File fileToPrint = new File(nombreArchivo);
                    Desktop.getDesktop().print(fileToPrint);
                }
                File fileToPrint = new File(nombreArchivo);
                Desktop.getDesktop().print(fileToPrint);
                
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (v == 1) {
            try {
                String nombreArchivo = crearExcel(Nombre, Cedula);
                carrito.vaciar();
                guardarInventario();
                actualizarCarrito();
                int v2 = JOptionPane.showOptionDialog(null, "Desea una copia de la factura?", "COPIA DE FACTURA", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, botones2, botones2[0]);
                if (v2 == 0) {
                    File fileToPrint = new File(nombreArchivo);
                    Desktop.getDesktop().print(fileToPrint);
                }
                File fileToPrint = new File(nombreArchivo);
                Desktop.getDesktop().print(fileToPrint);
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_PagarActionPerformed
    private void CargarInventario() throws FileNotFoundException {
        BufferedReader br = new BufferedReader(new FileReader(f));
        String linea;
        try {
            Producto producto = null;
            while ((linea = br.readLine()) != null) {
                String[] vec = linea.split(",");
                producto = new Producto(vec[0], Integer.parseInt(vec[1]), Integer.parseInt(vec[2]), Integer.parseInt(vec[3]));
                inventario.setProducto(producto);
            }
        } catch (IOException ex) {

        }
    }

    public void guardarInventario() {
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(f));
            ArrayList<Producto> Productos = inventario.getProductos();
            for (Producto Producto1 : Productos) {
                bw.write(Producto1.getNombre_producto() + "," + Producto1.getId_producto() + "," + Producto1.getPrecio() + "," + Producto1.getCantidad() + "\n");
            }
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void actualizarCarrito() {
        DefaultTableModel modeloinventario = (DefaultTableModel) TablaFactura.getModel();
        modeloinventario.setRowCount(0);
        int total = 0;
        if (!carrito.vacio()) {
            ArrayList<Producto> Productos = carrito.getProductos();
            for (Producto Producto1 : Productos) {
                modeloinventario.addRow(new Object[]{Producto1.getNombre_producto(), Producto1.getPrecio(), Producto1.getCantidad(), "" + (Producto1.getCantidad() * Producto1.getPrecio())});
                total += (Producto1.getCantidad() * Producto1.getPrecio());
            }
        }
        Total.setText("$" + total);
        TablaFactura.setModel(modeloinventario);
    }

    private void actualizarInventarioCarrito() {
        DefaultTableModel modeloinventario = (DefaultTableModel) TablaProductosFacturacion.getModel();
        modeloinventario.setRowCount(0);
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            modeloinventario.addRow(new Object[]{Producto1.getNombre_producto(), Producto1.getPrecio(), Producto1.getCantidad()});
        }
        TablaProductosFacturacion.setModel(modeloinventario);
    }

    private void actualizarInventarioCarrito(String text) {
        DefaultTableModel modeloinventario = (DefaultTableModel) TablaProductosFacturacion.getModel();
        modeloinventario.setRowCount(0);
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            if (Producto1.getNombre_producto().contains(text)) {
                modeloinventario.addRow(new Object[]{Producto1.getNombre_producto(), Producto1.getPrecio(), Producto1.getCantidad()});
            }
        }
        TablaProductosFacturacion.setModel(modeloinventario);
    }

    private void actualizarInventario() {
        DefaultTableModel modeloinventario = (DefaultTableModel) TablaInventario.getModel();
        modeloinventario.setRowCount(0);
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            modeloinventario.addRow(new Object[]{Producto1.getNombre_producto(), Producto1.getPrecio(), Producto1.getCantidad()});
        }
        TablaInventario.setModel(modeloinventario);
    }

    private void actualizarInventario(String text) {
        DefaultTableModel modeloinventario = (DefaultTableModel) TablaInventario.getModel();
        modeloinventario.setRowCount(0);
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            if (Producto1.getNombre_producto().contains(text)) {
                modeloinventario.addRow(new Object[]{Producto1.getNombre_producto(), Producto1.getPrecio(), Producto1.getCantidad()});
            }
        }
        TablaInventario.setModel(modeloinventario);
    }

    private int newId() {
        int id;
        do {
            id = (int) (Math.random() * 10000);
        } while (idexiste(id));
        return id;
    }

    private boolean idexiste(int id) {
        boolean sw = false;
        ArrayList<Producto> Productos = inventario.getProductos();
        for (Producto Producto1 : Productos) {
            if (Producto1.getId_producto() == id) {
                sw = true;
            }
        }
        return sw;
    }

    public String crearExcel(String Nombre, String cedula) {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh.mm");
        Date date = new Date();
        String fech = formatter.format(date);
        String nombreArchivo;
        if (Nombre != null) {
            nombreArchivo = "Recursos/Facturas/" + fech + " " + Nombre + ".xlsx";
        } else {
            nombreArchivo = "Recursos/Facturas/" + fech + ".xlsx";
        }

        ArrayList<Producto> productos = carrito.getProductos();
        ArrayList<String> nombres = new ArrayList<String>();
        ArrayList<Float> preciounitario = new ArrayList<Float>();
        ArrayList<Float> precio = new ArrayList<Float>();
        ArrayList<Float> cantidad = new ArrayList<Float>();
        int len = productos.size(), i = -5;
        for (Producto producto : productos) {
            nombres.add(producto.getNombre_producto());
            preciounitario.add(producto.getPrecio());
            cantidad.add(producto.getCantidad());
            precio.add(producto.getCantidad() * producto.getPrecio());
        }
        try {
            FileInputStream f = new FileInputStream("Recursos/FACTURA.xlsx");
            XSSFWorkbook libro = new XSSFWorkbook(f);
            XSSFSheet hoja = libro.getSheetAt(0);
            Iterator<Row> filas = hoja.iterator();
            Iterator<Cell> celdas;
            Row fila;
            Cell celda;
            while (filas.hasNext()) {
                fila = filas.next();
                celdas = fila.cellIterator();
                while (celdas.hasNext()) {
                    celda = celdas.next();
                    if (celda.getRowIndex() == 3 && celda.getColumnIndex() == 1) {//nombre
                        celda.setCellValue(celda.getStringCellValue() + Nombre);
                    }
                    if (celda.getRowIndex() == 3 && celda.getColumnIndex() == 2) {//cedula
                        celda.setCellValue(celda.getStringCellValue() + cedula);
                    }
                    if (celda.getRowIndex() == 3 && celda.getColumnIndex() == 3) {// fecha
                        celda.setCellValue(fech);
                    }
                    if (i < len) {
                        if (celda.getRowIndex() >= 5 && celda.getRowIndex() <= 20 && celda.getColumnIndex() == 1) {// nombre producto
                            celda.setCellValue(nombres.get(i));
                        }
                        if (celda.getRowIndex() >= 5 && celda.getRowIndex() <= 20 && celda.getColumnIndex() == 2) {// precio x cant
                            celda.setCellValue(preciounitario.get(i));
                        }
                        if (celda.getRowIndex() >= 5 && celda.getRowIndex() <= 20 && celda.getColumnIndex() == 3) {// cant
                            celda.setCellValue(cantidad.get(i));
                        }
                        if (celda.getRowIndex() >= 5 && celda.getRowIndex() <= 20 && celda.getColumnIndex() == 4) {// precio
                            celda.setCellValue(precio.get(i));
                        }
                    }
                    if (celda.getRowIndex() == 21 && celda.getColumnIndex() == 4) {// Total
                        celda.setCellValue(Total.getText());
                    }
                }
                i++;
            }

            File file = new File(nombreArchivo);
            try (FileOutputStream fileOuS = new FileOutputStream(file)) {
                if (file.exists()) {// si el archivo existe se elimina
                    file.delete();
                }
                libro.write(fileOuS);
                fileOuS.flush();
                fileOuS.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException ex) {
            System.out.println(ex.getLocalizedMessage());
        }
        return nombreArchivo;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AgregarProducto;
    private javax.swing.JTextField BuscarProducto;
    private javax.swing.JTextField CantidadProductoInventario;
    private javax.swing.JToggleButton GuardarProducto;
    private javax.swing.JToggleButton LimpiarCarrito;
    private javax.swing.JToggleButton Pagar;
    private javax.swing.JTextField PrecioProductoInventario;
    private javax.swing.JToggleButton QuitarProducto;
    private javax.swing.JToggleButton SeleccionarProducto;
    private javax.swing.JTable TablaFactura;
    private javax.swing.JTable TablaInventario;
    private javax.swing.JTable TablaProductosFacturacion;
    private javax.swing.JLabel Total;
    private javax.swing.JTextField cantidadProductoFacturacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nombreProductoFacturacion;
    private javax.swing.JTextField nombreProductoInventario;
    private javax.swing.JTextField precioProductoFacturacion;
    private javax.swing.JToggleButton seleccionarProducto;
    // End of variables declaration//GEN-END:variables

}
